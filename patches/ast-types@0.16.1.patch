diff --git a/lib/scope.d.ts b/lib/scope.d.ts
index 21bf0f3f8abd247e6a67e0003a14f1f016801c6d..e24879d11430cffb657045f1ecda5a7481f118bc 100644
--- a/lib/scope.d.ts
+++ b/lib/scope.d.ts
@@ -19,6 +19,7 @@ export interface Scope {
     lookup(name: any): any;
     lookupType(name: any): any;
     getGlobalScope(): Scope;
+    rename(oldName, newName): any
 }
 export interface ScopeConstructor {
     new (path: NodePath, parentScope: any): Scope;
diff --git a/lib/scope.js b/lib/scope.js
index 81d6b01ce4c07ebaf75f8551fcef0c9151252d4e..f115e7f31e84d3ae16980932914fbf3afc6e8541 100644
--- a/lib/scope.js
+++ b/lib/scope.js
@@ -3,6 +3,8 @@ Object.defineProperty(exports, "__esModule", { value: true });
 var tslib_1 = require("tslib");
 var shared_1 = require("./shared");
 var types_1 = tslib_1.__importDefault(require("./types"));
+var pathVisitor = require('./path-visitor');
+
 var hasOwn = Object.prototype.hasOwnProperty;
 function scopePlugin(fork) {
     var types = fork.use(types_1.default);
@@ -42,13 +44,25 @@ function scopePlugin(fork) {
     };
     var ScopeType = Type.or(
     // Program nodes introduce global scopes.
-    namedTypes.Program, 
+    namedTypes.Program,
     // Function is the supertype of FunctionExpression,
     // FunctionDeclaration, ArrowExpression, etc.
-    namedTypes.Function, 
+    namedTypes.Function,
     // In case you didn't know, the caught parameter shadows any variable
     // of the same name in an outer scope.
-    namedTypes.CatchClause);
+    namedTypes.CatchClause,
+
+    // https://github.com/benjamn/ast-types/pull/455
+    // as mentioned in the PR, the catch block bindings
+    // might not be correct, but it's better than nothing
+
+    // The following are statements that create block scopes
+    namedTypes.IfStatement,
+    namedTypes.ForStatement,
+    namedTypes.ForInStatement,
+    namedTypes.ForOfStatement,
+    namedTypes.TryStatement
+    );
     // These types introduce scopes that are restricted to type parameters in
     // Flow (this doesn't apply to ECMAScript).
     var TypeParameterScopeType = Type.or(namedTypes.Function, namedTypes.ClassDeclaration, namedTypes.ClassExpression, namedTypes.InterfaceDeclaration, namedTypes.TSInterfaceDeclaration, namedTypes.TypeAlias, namedTypes.TSTypeAliasDeclaration);
@@ -350,6 +364,28 @@ function scopePlugin(fork) {
             scope = scope.parent;
         return scope;
     };
+    // https://github.com/benjamn/ast-types/pull/608
+    Sp.rename = function(oldName, newName) {
+        var scope = this;
+        var parentPath = scope.path.parentPath;
+
+        var targetScopeNode = scope.lookup(oldName).getBindings()[oldName][0].node;
+
+        var PathVisitor = fork.use(pathVisitor.default);
+        PathVisitor.visit(parentPath, {
+            visitIdentifier: function(path) {
+                if (path.node.name === oldName) {
+                    var pathScope = path.scope.lookup(oldName);
+                    var scopeNode = pathScope.getBindings()[oldName][0].node;
+                    if (scopeNode === targetScopeNode && path.name !== 'property') {
+                        path.node.name = newName;
+                    }
+                }
+                return false;
+            }
+        });
+        return scope;
+    }
     return Scope;
 }
 exports.default = scopePlugin;
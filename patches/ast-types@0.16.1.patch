diff --git a/lib/node-path.d.ts b/lib/node-path.d.ts
index 14599f0944078149b138f58618422b8fc740f558..afc9699f7672955f33d98c14253a15cffcbd1bd8 100644
--- a/lib/node-path.d.ts
+++ b/lib/node-path.d.ts
@@ -4,7 +4,7 @@ import { Scope } from "./scope";
 export interface NodePath<N = any, V = any> extends Path<V> {
     node: N;
     parent: any;
-    scope: any;
+    scope: Scope | null;
     replace: Path['replace'];
     prune(...args: any[]): any;
     _computeNode(): any;
diff --git a/lib/scope.d.ts b/lib/scope.d.ts
index 21bf0f3f8abd247e6a67e0003a14f1f016801c6d..911eef13f46b9932694a5e412a07cc2c4bedd085 100644
--- a/lib/scope.d.ts
+++ b/lib/scope.d.ts
@@ -9,16 +9,18 @@ export interface Scope {
     bindings: any;
     types: any;
     didScan: boolean;
-    declares(name: any): any;
-    declaresType(name: any): any;
-    declareTemporary(prefix?: any): any;
+    declares(name: string): boolean;
+    declaresType(name: string): any;
+    declareTemporary(prefix?: string): any;
     injectTemporary(identifier: any, init: any): any;
-    scan(force?: any): any;
+    markAsStale(): void;
+    scan(force?: any): void;
     getBindings(): any;
     getTypes(): any;
-    lookup(name: any): any;
-    lookupType(name: any): any;
+    lookup(name: any): Scope;
+    lookupType(name: any): Scope;
     getGlobalScope(): Scope;
+    rename(oldName: string, newName: string): Scope;
 }
 export interface ScopeConstructor {
     new (path: NodePath, parentScope: any): Scope;
diff --git a/lib/scope.js b/lib/scope.js
index 81d6b01ce4c07ebaf75f8551fcef0c9151252d4e..e11cf6221c713bb0401d4fa31f2e50232eee740f 100644
--- a/lib/scope.js
+++ b/lib/scope.js
@@ -2,6 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 var tslib_1 = require("tslib");
 var shared_1 = require("./shared");
+var pathVisitor = require('./path-visitor');
 var types_1 = tslib_1.__importDefault(require("./types"));
 var hasOwn = Object.prototype.hasOwnProperty;
 function scopePlugin(fork) {
@@ -42,13 +43,28 @@ function scopePlugin(fork) {
     };
     var ScopeType = Type.or(
     // Program nodes introduce global scopes.
-    namedTypes.Program, 
+    namedTypes.Program,
     // Function is the supertype of FunctionExpression,
     // FunctionDeclaration, ArrowExpression, etc.
-    namedTypes.Function, 
+    namedTypes.Function,
     // In case you didn't know, the caught parameter shadows any variable
     // of the same name in an outer scope.
-    namedTypes.CatchClause);
+    namedTypes.CatchClause,
+
+    // https://github.com/benjamn/ast-types/pull/455
+    // as mentioned in the PR, the catch block bindings
+    // might not be correct, but it's better than nothing
+
+    // The following are statements that create block scopes
+    namedTypes.IfStatement,
+    namedTypes.ForStatement,
+    namedTypes.ForInStatement,
+    namedTypes.ForOfStatement,
+    namedTypes.TryStatement,
+
+    // Add BlockStatement as it can introduce a scope when using let/const
+    namedTypes.BlockStatement
+    );
     // These types introduce scopes that are restricted to type parameters in
     // Flow (this doesn't apply to ECMAScript).
     var TypeParameterScopeType = Type.or(namedTypes.Function, namedTypes.ClassDeclaration, namedTypes.ClassExpression, namedTypes.InterfaceDeclaration, namedTypes.TSInterfaceDeclaration, namedTypes.TypeAlias, namedTypes.TSTypeAliasDeclaration);
@@ -96,6 +112,9 @@ function scopePlugin(fork) {
         bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
         return identifier;
     };
+    Sp.markAsStale = function () {
+        this.didScan = false;
+    }
     Sp.scan = function (force) {
         if (force || !this.didScan) {
             for (var name in this.bindings) {
@@ -169,7 +188,16 @@ function scopePlugin(fork) {
             addTypePattern(path.get("id"), scopeTypes);
         }
         else if (namedTypes.VariableDeclarator.check(node)) {
-            addPattern(path.get("id"), bindings);
+            // feat: support destructuring VariableDeclarator in scan scope
+            // https://github.com/benjamn/ast-types/pull/588
+            const idPath = path.get("id");
+            if (namedTypes.ObjectPattern.check(idPath.node)) {
+                idPath.node.properties.forEach((prop, index) => {
+                    addPattern(path.get('id', 'properties', index, 'key'), bindings)
+                })
+            } else {
+                addPattern(path.get("id"), bindings);
+            }
             recursiveScanChild(path.get("init"), bindings, scopeTypes);
         }
         else if (node.type === "ImportSpecifier" ||
@@ -350,6 +378,28 @@ function scopePlugin(fork) {
             scope = scope.parent;
         return scope;
     };
+    // https://github.com/benjamn/ast-types/pull/608
+    Sp.rename = function(oldName, newName) {
+        var scope = this;
+        var parentPath = scope.path.parentPath;
+
+        var targetScopeNode = scope.lookup(oldName).getBindings()[oldName][0].node;
+
+        var PathVisitor = fork.use(pathVisitor.default);
+        PathVisitor.visit(parentPath, {
+            visitIdentifier: function(path) {
+                if (path.node.name === oldName) {
+                    var pathScope = path.scope.lookup(oldName);
+                    var scopeNode = pathScope.getBindings()[oldName][0].node;
+                    if (scopeNode === targetScopeNode && path.name !== 'property') {
+                        path.node.name = newName;
+                    }
+                }
+                return false;
+            }
+        });
+        return scope;
+    }
     return Scope;
 }
 exports.default = scopePlugin;